New Orleans => Level_1 (10 points)

Inspect set password field.
One can easily see that the password set was "2735435573562e" in hex.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Sydney => Level_2 (15 points)

Password was directly compared in check_password function
But it will not work because the comparison was performed in little endian system and also the hardware has 16 bit architecture. For the storage of values more than byte,in this system values will be stored in reverse order.
The system stores the hex form of input. As it is greater than 1 byte, the values will be stored in reverse order in a 16 - bit space.

For example lets say we have to store 12345678 in little endian system of 16 bit then we will make 16 bits section in the input. Here those will be '1234' and '5678' . Now these both will be stored in reverse order byte wise i.e as '34 12' and '78 56'.
Hence the password hex which we get from the assembly code (7745 627a 6e23 392d) is actually stored in little endian way. so in order to get the password hex, we have to reverse it again.

Password hex = 4577 7a62 236e 2d39
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Hanoi => level_3 (20 points)

They lied that the password is smaller than or equal to 16 character. Actually they are comparing hex of 17th character with e4.
We just have to take care that 17th character's hex value is e4.

One of the password hex => "74 68 6f 73 65 66 75 63 6b 65 72 73 6c 69 65 64 e4"
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Reykjavik => level_4 (35 points)

cmp #0xda6f, -0x24(r4)

Register State
pc  2448  sp  43da  sr  0000  cg  0000
r04 43fe  r05 5a08  r06 0000  r07 0000
r08 0000  r09 0000  r10 0000  r11 4534
r12 00f8  r13 00c4  r14 0002  r15 0200

Live Memory Dump
43c0:   0000 0000 0000 0000 0000 0000 0000 7824   ..............x$
43d0:   0100 4424 0200 da43 1f00 7a7a 7a7a 7a7a   ..D$...C..zzzzzz   // I entered zzzzzzzzzzzzzz as password
43e0:   7a7a 7a7a 7a7a 7a7a 0000 0000 0000 0000   zzzzzzzz........   // when prompted for purpose of testing
43f0:   0000 0000 0000 0000 0000 0000 0000 4e44   ..............ND

So basically its just comparing da64 with 1st and 2nd input character. Hence keeping in mind the little endianness of system,
our 2nd character's hex will be da and 1st character's hex will be 6f.

password =>"6fda"